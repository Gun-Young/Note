定义：Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用他的任意一个方法

     和属性，这种动态获取的信息以及动态调用对象的方法的功能称为反射机制。
     
     （动态获取类中信息，就是Java反射，可以理解为对类的解剖）     提高了应用程序的扩展性
     
     
     public class ReflectDemo
     {
     
            public static void main(String[] args)
            {
                  //createNewObject_1();
                  
                  createNewObject_2();
            }
     
            //1.通过空参数构造函数创建对象
            public static void createNewObject_1() throws ClassNotFoundException
            {
                 String name = "cn.itcast.bean.Person";
                 
                 //寻找该名称类文件，并加载进内存，并产生Class对象
                 Class clazz = Class.forName(name);
                 
                 //如何产生该类的对象呢
                 Object obj = clazz.newInstance(); //这个方法会调用空参数的构造函数
            
            }
           
           //2.通过非空参数构造函数创建对象
            public static void createNewObject_2() throws ClassNotFoundException
            {
                 String name = "cn.itcast.bean.Person";
                 
                 //寻找该名称类文件，并加载进内存，并产生Class对象
                 Class clazz = Class.forName(name);
                 
                 //获取到了指定的构造函数对象
                 Constructor constructor= clazz.getConstructor(String.class,int.class)
                 
                 //通过该构造器对象的newInstance方法进行对象的初始化
                 Object obj=constructor.newInstanece("小明",38);
                 
            
            }
     
            //3.获取Person类中的字段    getFields,获取公共的     getDeclaredFields,获取所有字段。包括私有字段
            
            public static void getFieldDemo() throws Exception
            {
                  Class clazz = Class.forName("cn.itcast.bean.Person");
                  
                 // Field field = clazz.getField("age");  //只能获取公有的
                  
                   //获取到age字段
                   Field field = clazz.getDeclaredField("age");  //获取所有字段。包括私有字段
                   
                   //对私有字段的访问取消权限检查，暴力访问。 范围公有字段不需要这句
                   field.setAccessible(true);   //不建议使用
                   
                   Object obj=clazz.newInstance();//获取实例
                   
                   field.set(obj,89);
                   
                   Object o =field.get(obj);
                   
                   System.out.println(o);
                   

            
            }
            
            //4.获取指定Class中的方法（空参数的方法）
            
            public static void getMethodDemo() throws Exception
            {
                 Class clazz= Class.forName("cn.itcast.bean.Person");
                 
                 //Method[] methods=clazz.getMethods();  //获取本类及父类中的公有方法
                 
                 //Method[] methods=clazz.getDeclaredMethods(); //只获取本类中所有方法，包含私有方法
                 
                  //获取单个方法
                  Method method = clazz.getMethod("show",null);  //获取空参数的show方法
                 
                  Constructor constructor =class.getConstructor(String.class,int.class);

                  Object obj = constructor.newInstance("小明",37);
                  
                  method.invoke(obj,null);
            
            }
            
            //5.获取指定Class中的方法（带有参数的方法）
            
             public static void getMethodDemo_2() throws Exception
            {
                 Class clazz= Class.forName("cn.itcast.bean.Person");
                 
                 //获取带有参数的方法
                 Method method = clazz.getMethod("paramMethod",String.class,int.class);
                 
                 Object obj = clazz.newInstance();
                 
                 Method.invoke(obj,"小强",89);
            
            }
   
     
     }
     
     
     //Person类
     
     package cn.itcast.bean;
     
     public class Person()
     {
     
           private int age;
           
           private String name;
           
           //有参数构造函数
           public Person(int age,String name)
           {
               super();
               this.age=age;
               this.name=name;
               
               System.out.println("Person param run ......."this.name+":"+this.age);
           }
          
          //无参数构造函数
          public Person()
          {
               super();
               
               System.out.println("person run...........");
          }
          public void show()
          {
               System.out.println(name+"....show--run...."+age);
          
          }
          private void method()
          {
            System.out.println("method run ......");
          }
          
          public void paramMethod(String str,int num)
          {
                System.out.println("paramMethod run ...."+str+":"+num);
              
          }
          
          public static void  staticMethod()
          {
             System.out.println("static method run.......");
          }
          
          
          
          
          
          
          
          
     }
     
     
     
     
     
     
