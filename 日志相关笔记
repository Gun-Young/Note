log4j 随笔

1. 组成
   Log4j 主要由Loggers(日志记录器)，Appenders(输出端) 和 Layout(日志格式化器)组成。
   Loggers控制日志的输出级别与日志是否输出；
   Appenders 指定日志的输出方式（输出到控制台，文件等）；
   Layout 控制日志的输出格式
   
   
 2.日志级别
    一般只使用4个级别，优先级从高到低 ERROR > WARN > INFO >DEBUG
	
	

3.Appenders(输出端)
    用来指定日志输出到那个地方，可以同时指定日志的输出目的地，常用的输出目的地：
	ConsoleAppender :将日志输出到控制台
	FileAppender: 将日志输出到文件中
	DailyRollingFileAppender: 将日志输出到一个日志文件，并且每天输出到一个新的文件
	RollingFileAppender: 将日志信息输出到一个日志文件，并且指定文件的尺寸，当文件大小达到指定的尺寸时，会自动把文件改名，同时产生一个新的文件
	JDBCAppender: 把日志信息保存到数据库中
	
	
4.Layout（日志格式化器）
  HTMLLayout : 格式化日志输出为HTML表格形式
  SimpleLayout : 简单的日志输出格式化，打印的日志格式为（info - message）
  PatternLayout : 最强大的格式化，可以根据自定义格式输出日志，如果没有指定转换格式，就是用默认的转换格式
  
  
  ------------------------------------------------------------------logback 日志------------------------------------------------

一. logback架构：

	Logback 构建在三个主要的类上： Logger,Appender和Layouts
	Logger类属于logback-classic模块的一部分
	Appender和Layouts接口是logback-core的一部分
	
	1.Logger 是调用的API，在程序中进行输出
	
	2.Appender是输出目的地
		输出目的地叫做 appender。appender 包括console、file、remote socket server、MySQL、PostgreSQL、Oracle 或者其它的数据库、
		JMS、remote UNIX Syslog daemons 中。如果没有指定默认的输出，则默认为console(控制台)。
		一个logger可以有多个Appender.
	
	3.Layouts是日志格式化
	 用户既想自定义日志的输出地，也想自定义日志的输出格式。通过给 appender 添加一个 layout 可以做到。layout 的作用是将日志格式化，
	 而 appender 的作用是将格式化后的日志输出到指定的目的地。
	   
	
	

二.配置logback
   1.logback初始化步骤：
        （1）logback 会在类路径下寻找名为 logback-test.xml 的文件。
		（2）如果没有找到，logback 会继续寻找名为 logback.groovy 的文件。
		（3）如果没有找到，logback 会继续寻找名为 logback.xml 的文件。
		（4）如果没有找到，将会通过 JDK 提供的 ServiceLoader 工具在类路径下寻找文件 META-INFO/services/ch.qos.logback.classic.spi.Configurator，该文件的内容为实现了 Configurator 接口的实现类的全限定类名。
		（5）如果以上都没有成功，logback 会通过 BasicConfigurator 为自己进行配置，并且日志将会全部在控制台打印出来。
		  最后一步的目的是为了保证在所有的配置文件都没有被找到的情况下，提供一个默认的（但是是非常基础的）配置。
		  
	      如果你使用的是 maven，你可以在 src/test/resources 下新建 logback-test.xml。maven 会确保它不会被生成。
		  所以你可以在测试环境中给配置文件命名为 logback-test.xml，在生产环境中命名为 logback.xml。
	
	
	2.如果logback-test.xml 或logback.xml不存在，logback 会使用最小配置BasicConfiguration，级别为debug,输出为ConsoleAppender,格式为
	    %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 
	   下面的配置相当于BasicConfiguration
	   
	      <configuration>
				<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">      ------------------------->输出目的地console
					<encoder>
						<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>  ---------------------->日志格式
					</encoder>
				</appender>

				<root level="debug">   --------------------->日志级别
					<appender-ref ref="STDOUT" />
				</root>
			</configuration>
			你需要将上面的配置文件命名为 logback.xml 或 logback-test.xml
	
	
	
	3.当配置文件更改时，自动加载
	   为了能够让logback能够在配置文件改变的时候自动去扫描，需要在<configuration>标签上添加scan=true属性
	    <configuration scan="true">
			...
		</configuration>
		默认情况下，一分钟扫描一次配置文件，看是否更改，通过<configuration>标签上的scanPreiod属性可以指定扫描周期。扫描周期的事件单位
		可以时毫秒，秒，分钟，小时
		<configuration scan="true" scanPeriod="30 seconds">   注意：如果没有指定时间单位，默认是毫秒
		   ...
		</configuration>
	
	
	
	 4.配置文件的语法
	   最基本的结构为<configuration>元素，包含0或多个<appender>元素，0或多个<logger>元素，最多1个<root>元素
	   <configuration>
	         //0个或多个appender
	         <appender>
			 </appender>
			 
			 //0个或多个<logger>
			 <logger>
			 </logger>
			 
			 //最多一个
			 <root>
			 </root>
			 
	   </configuration>
	
	
	5.配置logger
	   通过<logger>标签来给logger进行配置
	   nam: 必填
	   level:选填  TRACE,DEBUG,INFO,WARN,ERROR,ALL,OFF,INHERITED,NULL
	   additivity: 选填  TRUE/FALSE  ，是否叠加
	   
	   <logger>元素至少包含0或多个<appender-ref>元素，每个appender通过这种方式被添加到logger上
	
	6.配置root logger
	    root logger 通过 <root> 元素来进行配置。它只支持一个属性——level。它不允许设置其它任何的属性，因为 additivity 并不适用 root logger。
		而且，root logger 的名字已经被命名为 "ROOT"，也就是说也不支持 name 属性。level 属性的值可以为：TRACE、DEBUG、INFO、WARN、
		ERROR、ALL、OFF，但是不能设置为 INHERITED 或 NULL。跟 <logger 元素类似，<root> 元素可以包含 0 或多个 <appender-ref> 元素。
		例如：
		 <root level="INFO">  
			<appender-ref ref="consoleApp"/>
			<appender-ref ref="fileInfoApp"/>
			<appender-ref ref="fileErrorApp"/>
		</root>
	
	
	  7.配置：appender
	      appender 通过 <appender> 元素进行配置，需要两个强制的属性 name 与 class。name 属性用来指定 appender 的名字，
		  class 属性需要指定类的全限定名用于实例化。<appender> 元素可以包含 0 或一个 <layout> 元素，0 或多个 <encoder> 元素，
		  0 或多个 <filter> 元素。除了这些公共的元素之外，<appender> 元素可以包含任意与 appender 类的 JavaBean 属性相一致的元素
		  示例：
		    <?xml version="1.0" encoding="UTF-8"?>
			<configuration>
				<appender name="FILE" class="ch.qos.logback.core.FileAppender">
					<file>myApp.log</file>
					<encoder>
						<pattern>
							%date %level [%thread] %logger{10} [%file:%line] %msg%n
						</pattern>
					</encoder>
				</appender>

				<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
					<encoder>
						<pattern>
							%msg%n
						</pattern>
					</encoder>
				</appender>

				<root level="debug">
					<appender-ref ref="FILE" />
					<appender-ref ref="STDOUT" />
				</root>
			</configuration>
			这个配置文件定义了两个 appender：FILE 和 STDOUT。FILE appender 将日志输出到 myApp.log 文件。
			encoder 通过 PatternLayoutEncoder 输出日期、日志等级、线程名、logger 的名字、可以定位日志来源的文件以及所在行、
			具体的日志信息以及行分隔符。第二个 appender 是 STDOUT，将日志输出到控制台。它的 encoder 仅仅输出日志信息以及行分隔符
	
	8.重复使用appender
	
	  在默认的情况下，appender 是可以重复使用的：logger 可以通过附加到本身的 appender 输出日志，同样的也可以附加到起祖先的身上，并输出日志。
	  因此，如果同一个 appender 附加到多个 logger 身上，那么就导致日志重复打印。
		<?xml version="1.0" encoding="UTF-8"?>
		<configuration>
			<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
				<encoder>
					<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
				</encoder>
			</appender>

			<logger name="chapters.configuration">
				<appender-ref ref="STDOUT" />    ----------------- STDOUT第一次使用
			</logger>

			<root level="debug">
				<appender-ref ref="STDOUT" />    ----------------- STDOUT第二次使用
			</root>
		</configuration>
	
	注意：日志重复输出了，因为 appender STDOUT 附加到了两个 logger 身上：root 以及 chapters.configuration。因为 root logger 是所有 logger 的祖先，
	chapters.configuration 是 chapters.configuration.MyApp3 以及 chapters.configuraion.Foo 的父级。每一次日志请求都会被打印两次，一次是通过 STDOUT，一次是通过 root。
	
	
	appender的叠加特性是logback非常方便的一个特性，你可以让系统中所有的日志输出到控制台上，而其他特定的日志输出到特性的appender中。
	<?xml version="1.0" encoding="UTF-8"?>
	<configuration>
		<appender name="FILE" class="ch.qos.logback.core.FileAppender">
			<file>myApp.log</file>
			<encoder>
				<pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
			</encoder>
		</appender>

		<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
			<encoder>
				<pattern>%msg%n</pattern>
			</encoder>
		</appender>

		<logger name="chapters.configuration">
			<appender-ref ref="FILE" />         --------   输出到文件
		</logger>

		<root level="debug">
			<appender-ref ref="STDOUT" />    ----------  打印在控制台
		</root>
	</configuration>
	
	
	
	
	9.变量替换
	     lockback支持变量的定义以及替换，变量有它的作用域。变量可以在配置文件中，外部文件中，外部资源文件中，甚至动态定义
		 例1：
		  <configuration>
				<property name="USER_NAME" value="/data/logs" />       ---------------------定义变量
				<appender name="FILE" class="ch.qos.logback.core.FileAppender">
					<file>${USER_NAME}/myApp.log</file>          -----------------------使用变量
					<encoder>
						<pattern>%msg%n</pattern>
					</encoder>
				</appender>
				<root level="debug">
					<appender-ref ref="FILE" />
				</root>    
			</configuration>
	
	
	     例2：在java的系统变量中定义一个同样的变量
			  java -DUSER_NAME="/data/logs"       ----------------------定义变量
			  
			 <configuration>
				<appender name="FILE" class="ch.qos.logback.core.FileAppender">
					<file>${USER_HOME}/myApp.log</file>    --------------------使用变量
					<encoder>
						<pattern>%msg%n</pattern>
					</encoder>
				</appender>
				<root level="debug">
					<appender-ref ref="FILE" />
				</root>    
			</configuration>
	
	
	   例3：引用一个外部文件，外部文件中的配置为 USER_NAME=/data/logs
			<configuration>
				<property file="F:\project\logback-examples\src\main\resources\variables1.properties"/>       ----- 引用外部文件
				<appender name="FILE" class="ch.qos.logback.core.FileAppender">
					<file>${USER_HOME}/myApp.log</file>        -------------- 使用变量
					<encoder>
						<pattern>%msg%n</pattern>
					</encoder>
				</appender>
				<root level="debug">
					<appender-ref ref="FILE" />
				</root>
			</configuration>
	
	  例4： 引用classpath下的资源文件
	       <configuration>
				<property resource="resource1.properties" />     --------------引用classpath下的资源文件
				<appender name="FILE" class="ch.qos.logback.core.FileAppender">
					<file>${USER_HOME}/myApp.log</file>       ------ 使用变量
					<encoder>
						<pattern>%msg%n</pattern>
					</encoder>
				</appender>
				<root level="debug">
					<appender-ref ref="FILE" />
				</root>
			</configuration>
	
	
	
	
	
	
	
	
三： Appender
     logback 将写入日志事件的任务委托给一个名为appender的组件，Appender必须实现ch.qos.logback.core.Appender接口，如下：
	
  	public interface Appender<E> extends LifeCycle, ContextAware, FilterAttachable {
		  public String getName();
		  public void setName(String name);
		  void doAppend(E event);
	}
	
	doAppend方法负责将日志事件进行格式化，然后输出到对应的设备上。
	
	
	*********自定义appender******************
	通过继承AppenderBase可以编写自己的appender,它支持处理过滤器，状态信息，以及其他大多数appender共享的功能，
	子类仅仅只需实现append(Object eventObject)方法
	
	 (1) 自定义appender
		   public class MyLogbackAppender extends UnsynchronizedAppenderBase<ILoggingEvent> {
				private Layout<ILoggingEvent> layout;
				/**
				 * 自定义属性
				 */
				private String printString;

				/**
				 * 初始时调用：可以做数据库的连接初始化，mq的连接等
				 */
				@Override
				public void start() {
					super.start();
					System.out.println("日志start方法运行--------------");
				}

				/**
				 * 停止时调用，可以做资源的释放
				 */
				@Override
				public void stop() {
					super.stop();
					System.out.println("日志end方法运行-----------------");
				}

				@Override
				protected void append(ILoggingEvent event) {
					if (event == null || !isStarted()) {
						return;
					}

					//自定义实现输出
					//使用输出值event.getFormattedMessage();
					//格式化输出
					System.out.println(JSON.toJSON(event.getArgumentArray()));
					System.out.println(JSON.toJSONString(event.getMDCPropertyMap()));
					System.out.println(printString + ":" + layout.doLayout(event));


				}

				public Layout<ILoggingEvent> getLayout() {
					return layout;
				}

				public void setLayout(Layout<ILoggingEvent> layout) {
					this.layout = layout;
				}

				public String getPrintString() {
					return printString;
				}

				public void setPrintString(String printString) {
					this.printString = printString;
				}
			}

	
	 (2) 配置文件中使用appender
	    <appender name="MyLogback" class="com.young.test.logbackmespringbootstarter.appender.MyLogbackAppender">   ------->使用自定义的appender
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
				<!-- 日志收集最低日志级别 -->
				<level>INFO</level>
			</filter>
			<layout class="ch.qos.logback.classic.PatternLayout">
				<pattern>
					%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread]%logger{56}.%method:%L -%msg%n
				</pattern>
			</layout>
			<printString>test</printString>   ---------------------->自定义参数
      </appender>
	
		 <root level="INFO">  
			<appender-ref ref="MyLogback"/>
		</root>
	
	
	(3) 实际使用logback配置文件示例： logback-spring.xml
		<?xml version="1.0" encoding="UTF-8" ?>
			<configuration>

				<appender name="consoleApp" class="ch.qos.logback.core.ConsoleAppender">
					<layout class="ch.qos.logback.classic.PatternLayout">
						<pattern>
							%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread]%logger{56}.%method:%L -%msg%n
						</pattern>
					</layout>
				</appender>

				<appender name="MyLogback" class="com.young.test.logbackmespringbootstarter.appender.MyLogbackAppender">
					<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
						<!-- 日志收集最低日志级别 -->
						<level>INFO</level>
					</filter>
					<layout class="ch.qos.logback.classic.PatternLayout">
						<pattern>
							%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread]%logger{56}.%method:%L -%msg%n
						</pattern>
					</layout>
					<printString>test</printString>
				</appender>

				<appender name="fileInfoApp" class="ch.qos.logback.core.rolling.RollingFileAppender">
					<filter class="ch.qos.logback.classic.filter.LevelFilter">
						 <level>ERROR</level>
						<onMatch>DENY</onMatch>
						<onMismatch>ACCEPT</onMismatch>
					</filter>
					<encoder>
						<pattern>
							%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n
						</pattern>
					</encoder>
					<!-- 滚动策略 -->
					<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
						<!-- 路径 -->
						<fileNamePattern>app_log/log/app.info.%d.log</fileNamePattern>
					</rollingPolicy>
				</appender>

				<appender name="fileErrorApp" class="ch.qos.logback.core.rolling.RollingFileAppender">
					<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
						<level>ERROR</level>
					</filter>
					<encoder>
						<pattern>
							%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n
						</pattern>
					</encoder>
					
					<!-- 设置滚动策略 -->
					<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
						<!-- 路径 -->
						<fileNamePattern>app_log/log/app.err.%d.log</fileNamePattern>
						
						<!-- 控制保留的归档文件的最大数量，超出数量就删除旧文件，假设设置每个月滚动，
						且<maxHistory> 是1，则只保存最近1个月的文件，删除之前的旧文件 -->
						 <MaxHistory>1</MaxHistory>
						
					</rollingPolicy>
				</appender>
			   <root level="INFO">  
					<!--<appender-ref ref="consoleApp"/>-->
					<!--<appender-ref ref="fileInfoApp"/>-->
					<!--<appender-ref ref="fileErrorApp"/>-->
					<appender-ref ref="MyLogback"/>
				</root>
		  </configuration>
	
	
	
	
