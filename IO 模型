Linu IO模型

一.IO操作
    网络的IO本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。以一次IO访问来说，
	数据会先被拷贝到操作系统内核的缓冲区，然后才会从操作系统的内核的缓冲区拷贝到应用程序的地址空间。
	所以会有两个阶段的操作:
	1.第一阶段：数据被复制到内核缓冲区
	2.第二阶段：将数据从内核缓冲区复制到进程缓冲区
	
	** 网络应用需要处理的无非就两大问题，网络IO和数据的计算。相对于后者，网络IO的延迟，给应用带来的性能
	    瓶颈大于后者。





二.同步/异步/阻塞/非阻塞
    
	1.同步和异步
		同步和异步与消息的通知有关。
		** 同步：由调用者主动等待这个调用结果
		** 异步：在调用发出后，被调用者通过状态，通知来通知调用者，或者通过回调函数处理这个调用
		
	 2.阻塞和非阻塞
	    程序在等待调用结果（消息，返回值）时的状态
		** 阻塞：当前线程会被挂起，调用线程只有在得到结果之后才会返回
		** 非阻塞：非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。
		     （比如去轮询结果，主动获取结果，就是同步的非阻塞的 ）
		




三. IO网络模型
     阻塞，非阻塞，IO多路复用，信号量（不常用），异步
	 
	
	1.同步阻塞IO（blocking io）
	    阻塞的进程“被”休息，CPU去处理其他进程，此时被阻塞的进程不占用CPU资源
		
	    执行流程：
		当用户进程调用了recv()/recvfrom()这个系统调用，内核就开始了IO的第一个阶段：准备数据。
		这个过程需要等待，也即是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的，而在
		用户进程这边，整个进程会被阻塞。第二阶段：当内核将数据准备好，用户进程就会将数据拷贝到用户内存中，
		然后内核返回结果，用户进程才解除block的状态，重新运行起来。
		
		所以，blocking io的特点就是在IO执行的两个阶段都被block了。
		
		
		
	2.同步非阻塞（noblocking io）
	   在网络IO的时候，非阻塞IO也会进行recvfrom系统调用，检查数据是否准备好，与阻塞IO不一样，非阻塞
	   将大的整片时间的阻塞分成N个小得阻塞，所以进程不断得有机会被cpu光顾。
	   
	   也就是说，非阻塞式io执行recvfrom系统调用之后，进程并没有阻塞，内核马上返回给进程，如果数据
	   还没准备好，此时会返会一个error。进程在收到返回后，可以干点别的事，然后再发起recvfrom 系统调用。
	   循环往复得进行recvfrom系统调用，这个过程称为轮询。轮询检查内核数据，直到数据准备好，用户进程拷贝
	   数据进入用户空间。进程进行数据处理，需要注意的是，拷贝数据的过程，进程仍然是阻塞的。
	   
	   执行流程：
	   当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻
	   返回一个error。从用户进程角度讲，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。
	   用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel
	   中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，
	   然后返回。

       优点：能够再等待任务完成的时间里去干其他活了
	   缺点：任务完成的响应延迟增大了，因为每过一段时间才去轮询一次read操作，而任务可能在两次轮询之间的任意
	           时间完成，这会导致整体数据吞吐量的降低。并且轮询会消耗大量的CPU资源
		



     3.IO多路复用（IO multiplexing）  -------   对比阻塞io
	      
		  IO多路复用模型会用到select,poll，epoll函数，这几个函数也会使进程阻塞，但是和阻塞IO不同的是，这两个
		  函数可以同时阻塞多个IO操作，而且可以同时对多个读写操作的IO函数进行检测，直到有数据可读写时（注意：
		  不是全部可读可写），才真正调用IO操作函数。
		  
		  当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，
		  当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel
		  拷贝到用户进程。

		  

      4.异步（asynchronous io）
	     用户进程进行aio_read系统调用之后，无论内核数据是否准备好，都会直接返回用户进程，然后用户进程可以去
		 做别的事情。当内核数据准备好时，内核直接复制数据给进程，然后从内核向进程发送通知，IO两个阶段，都是
		 非阻塞的。
		 
		 用户进程发起aio_read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它收到一个
		 asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据
		 准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal或执行一个
		 基于线程的回调函数来完成这次 IO 处理过程，告诉它read操作完成了。







四.多路复用三种机制
     select  poll epoll
	 1.select  （时间复杂度O(n)）
	      它仅仅直到有IO事件发生，缺不知道是哪几个流，我们只能无差别的轮询所有流，找出能读出数据，或者
		  写入数据的流，对他们进行操作。所有select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别
		  轮询的时间就越长
		  
	  2. poll （时间复杂度O(n)）
	      poll本质上和select没有区别，它没有最大连接数的限制。
		  
	  3.epoll （时间复杂度O(1)）
	      epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。
	      所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）

     select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪
   （一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们
	 都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，
	 异步I/O的实现会负责把数据从内核拷贝到用户空间。







五.reactor 反应器模式

   




















