TCC分布式事务

1.TCC  
    三个阶段：try,confirm,cancel


2. 伪代码
 public class OrderService{
 
      //库存服务
      @Autowired
	  private InventtoryService inventoryService;
	  
	  //积分服务
	  @Autowired
	  private CreditService  creditService
	  
	  //仓储服务
	  @Autowired
	  private WmsService wmsService;
 
 
      public void pay(){
	  
	        //对本地的订单数据库修改订单状态为“已支付”
	        orderDao.updateStatus(OrderStatus.PAYED);
			
			//调用库存服务扣减库存
			inventoryService.reduceStock();
			
			//调用积分服务增加积分
			creditService.addCredit();
			
			//调用仓储服务通知发货
			wmsService.saleDelivery();
	  
	  }
 }
 
 订单服务完成本地数据库操作之后，通过Spring Cloud的Feign来调用其他的各个服务。
 
 
 
 3. try阶段 (增加中间状态)
	订单服务：先把自己的状态修改为OrderStatus.UPDATING,也就是说在pay()方法里，不直接把订单状态修改为已支付的状态，先把订单状态
					   修改为UPDATING,也就是修改中。
	库存服务：也不直接减扣库存，可以先冻结库存。举例:本来库存数量是100，不直接100-2=98，扣减这个库存。可以把剩余库存100-2=98，
					   设置为98没问题，然后在一个单独的冻结表库存的字段里，设置一个2，也就是，有两个库存是给冻结的。
	积分服务：积分服务的addCredit()接口也是同理，不直接给用户增加会员积分，可以在积分表里的一个预增加积分字段加入积分
					   比如：用户积分原本是1190，现在要增加10个积分，别直接1190+10=1200个积分。可以保持积分为1190不变，在一个预增加
					   字段里，比如说pre_add_credit字段，设置一个10，表示有10个积分准备增加。
	仓储服务：saleDelivery()接口也是，可以先创建一个销售出库单，但是这个销售出库单的状态是UNKNOWN,也就是说，刚刚创建这个销售出库单，
					  此时还不确定他的状态是什么。
	如果要实现一个TCC分布式事务，首先业务的主流程以及各个接口提供的业务含义，不能直接完成哪个操作，而是完成一个try操纵。
	这个操纵，一般都是锁定某个资源，设置一个预备的状态，冻结部分数据等等。
	
	
	
4.confirm阶段
   如果在各个服务里引入一个TCC分布式事务的框架，订单服务里内嵌的那个TCC分布式事务框架可以感知贷，各个服务的Try操作都成功了。
   此时，TCC分布式事务框架会控制进入下一个阶段，第一个C阶段，也就是Confirm阶段。在这个阶段，需要做的逻辑：
   订单服务： 状态正式修改为已支付
   库存服务：冻结的状态修改解冻
   积分服务：将pre_add_credit设置为0,正式添加到积分
   仓储服务：将UNKNOWN状态修改为已创建  （注意：这些操作都是在各个服务里的confirm逻辑里）
   
   上面各个服务的Confirm的逻辑都实现好了，一旦订单服务里面的TCC分布式事务框架感知到各个服务的Try阶段都成功了以后，就会
   执行各个服务的Confirm逻辑。
   订单服务内的TCC事务框架会负责跟其他各个服务内的TCC事务框架进行通信，依次调用各个服务的confirm逻辑，然后，正式完成各个
   服务的所有业务逻辑的执行。
   


5. cancel阶段：
如果在某个服务出现异常，比如在积分服务出现异常，那么订单服务被的TCC事务框架是可以感知到的，然后他会决定对整个TCC
分布式事务进行回滚。也就是说，会执行各个服务的第二个C阶段，Cancel阶段。

各个服务在cancel阶段的逻辑：
订单服务： 将订单状态设置为CANCELED,也就是这个订单的状态是已取消
库存服务：将冻结的库存，加回到剩余库存里，98+2=100
积分库存： 将pre_add_credit设置为0, 总积分不变
仓储服务： 将销售出库单的状态修改为CANCELED,即已取消


这时候，订单服务的TCC分布式事务框架只要感知到了任何一个服务的Try逻辑失败了，就会跟各个服务内的TCC分布式事务框架进行通信，
然后调用各个服务的cancel逻辑。

	
	
6. TCC分布式事务
如果想用TCC分布式事务框架的话，首先需要选择某种TCC分布式事务框架，各个服务里就会有这个TCC分布式事务框架在运行，然后，原本一个
接口，要改造成3个逻辑，try-confirm-cancel
** 首先服务调用try逻辑
** 如果都正常的话，TCC分布式事务框架推进执行confirm逻辑，完成整个事务
** 如果某个服务的try逻辑有问题，TCC分布式事务框架感知到之后就会推进执行各个服务的cancel逻辑，撤销之前执行的各种操作

这就是TCC分布式事务。

万一某个服务的cancel或者confirm逻辑执行一直失败，TCC事务框架会通过活动日志记录各个服务的状态。如果发现某个服务的cancel
或者confirm一直没成功，会不通的重试调用它的cancel或者confirm逻辑，务必要他成功。



7.框架
ByteTCC, tcc-transaction,himly










