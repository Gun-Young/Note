
1. 信号量
**
 * @Auther: yg
 * @Date: 2020/07/07/11:07
 * @Description: 信号灯，计数信号量，常用于限制可以访问某些资源的线程数量
 */
public class SemaphoreTest {

    public static void main(String[] args) {

        //创建线程池
        ExecutorService executorService = Executors.newCachedThreadPool();

        //信号量，只允许3个线程同时访问
        Semaphore semaphore = new Semaphore(3);

        //创建10个线程
        for(int i=0;i<10; i++){
            final long num = i;
            executorService.submit(new Runnable() {
                @Override
                public void run() {
                    try{
                        //获取许可
                        semaphore.acquire();
                        System.out.println("acquire:"+num);
                        Thread.sleep(new Random().nextInt(5000));
                        //释放许可
                        semaphore.release();
                        System.out.println("release:"+num);

                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }
            });
        }
    }
}



2.计数器
public class CountDownLatchTest {

    //定义倒计时容器容量
    static CountDownLatch countDownLatch = new CountDownLatch(6);

    public static void main(String[] args) {

        //创建一个有10个线程的线程池
        ExecutorService executorService = Executors.newFixedThreadPool(10);

        //新开线程去执行
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                try {
                    //这个线程会等待计数器=0时才会执行
                    countDownLatch.await();
                    System.out.println("等待的线程执行了........");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });


        //开启6个线程去执行
        for(int i=0;i<6;i++){
            final int num = i;
            executorService.submit(new Runnable() {
                @Override
                public void run() {
                    try {
                        Thread.sleep(new Random().nextInt(5000));
                        System.out.println("需要提前执行的线程"+num+"执行了.....");
                        //计数器减一
                        countDownLatch.countDown();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            });
        }

    }

}


