

参考文章1：https://www.cnblogs.com/myseries/p/10918819.html
参考文章2：https://www.cnblogs.com/myseries/p/11107432.html



 一. 如何停止线程 
   1.任务中一般都会有循环结构，只要用一个标记控制住循环，就可以结束任务。
   2.如果线程处于了”冻结状态“，无法读取标记，此时可以使用interruot()方法将线程”从冻结状态强制恢复到运行状态中“来，让线程具备CPU的执行资格
   
   
二、使用退出标记
   当run方法执行完成后，线程就会退出，但有时run方法是永远不会结束的，如在服务端程序中使用线程监听客户端请求，或者其他的需要循环处理的任务。
   在这种情况下，一般是将这些任务放在一个循环中，如while循环。如果想使while在某一特定条件下退出，最直接的方法就是设一个boolean类型的标志，
   并通过设置这个标志为true或false来控制while循环是否退出。
   
   public class test1 {

		public static volatile boolean exit =false;  //退出标志
		
		public static void main(String[] args) {
			new Thread() {
				public void run() {
					System.out.println("线程启动了");
					while (!exit) {
						try {
							Thread.sleep(1000);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					System.out.println("线程结束了");
				}
			}.start();
			
			try {
				Thread.sleep(1000 * 5);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			exit = true;//5秒后更改退出标志的值,没有这段代码，线程就一直不能停止
		}
	}
   
   
   
 
三. 使用interrupt方法 
       Thread.interrupt()方法：作用是中断线程。将会设置该线程的中断状态为，即设置为true,中断的结果线程是死亡，还是等待新的任务或者继续运行，
   就取决于这个程序本身。线程会不时的检测这个中断标志位，以判断线程是否应该被中断（中断标志值是否为true）。它并不像stop方法那样会中断一个
   运行中的线程。 
       interrupt()方法“只是改变中断状态，不会中断一个正在运行的线程”。需要用户自己去监视线程的状态并做处理。支持线程中断的方法（也就是线程中
   断后会抛出interruptedException的方法）就是在监视线程的中断状态，一旦线程的中断状态被设置为“中断状态”，就会抛出中断异常。这一方法实际完成的是，
   给受阻塞的线程发出一个中断信号，这样受阻线程检查到中断标识，就得以退出阻塞的状态。
       更确切的说，如果线程被Object.wait,Thread.join,和Thread.sleep三种方法之一阻塞，此时调用该线程的interrupt()方法，那么该线程抛出一个
	InterruptedException中断异常(该线程必须实现预备号处理此异常)，从而提早的终结被阻塞状态。如果线程没有被阻塞，这时调用interrupt()将不起
   作用，直到执行到wait(),sleep(),join()时，才马上会抛出InterruptException


   1. 使用interrupt() + InterruptedException来中断线程 
      
	   线程处于阻塞状态，如Thread.sleep，wait,IO阻塞等情况时，调用interrupt方法后，sleep等方法将会抛出一个InterruptedException
		public static void main(String[] args) {
			Thread thread = new Thread() {
				public void run() {
					System.out.println("线程启动了");
					try {
						Thread.sleep(1000 * 100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					System.out.println("线程结束了");
				}
			};
			thread.start();

			try {
				Thread.sleep(1000 * 5);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			thread.interrupt();//作用是：在线程阻塞时抛出一个中断信号，这样线程就得以退出阻塞的状态
		}


   2.使用interrupt() + isInterrupted()来中断线程 
      ** interrupted(): 检查当前线程是否已经中断（静态方法），如果连续调用该方法，第二次调用将返回false,在api文档中说明interrupted()方法 
	      具有清除状态的功能，执行后具有将状态标识清除为false的功能。
		  interrupted()方法是静态方法：内部实现是调用的当前线程的isInterrupted(),并且会重置状态
	  ** isInterrupted()： 测试线程是否已经中断，但是不能清除状态标识。





线程中断的理解： 
  首先一个线程不应该由其他线程来强制中断或停止，而是应该由线程自己自行停止，所以，Thread.stop,Thread.suspend,Thread,resume都已经废弃了。
  而Thread.interrupt的作用其实也不是中断线程，而是通知线程应该中断了，具体到底是继续运行，应该是由被通知的线程自己处理。
  
  具体来说，当对一个线程，调用interrupt()时， 
  （1） 如果线程处于被阻塞状态（例如处于 BLOCKED,WAITING,TIMED_WAITING这三个状态时），那么线程将立即退出被阻塞状态，变成RUNNABLE状态，并抛出一个
        InterruptedException异常（需要这个异常进行处理）
  （2） 如果线程处于正常活动状态，那么会将该线程的中断标志设置为true,仅此而已，被设置中断标志的线程将继续正常运行，不受影响。
   
  interrupt()并不能真正的中断线程，需要被调用的线程自己进行配合才行，也就是说，一个线程如果有被中断的需求，那么就可以这样做
  （a） 在正常运行任务时，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程
  （b）在调用阻塞方法时正确处理InterruptedException异常(比如：catch异常后就结束线程)
    
  


