一. 什么是消息中间件
消息中间件，也可以称为消息队列，它一般有两种传递模式，点对点模式和发布/订阅模式。


二.消息中间件使用场景
   消息中间件适用于需要可靠的数据传送的分布式环境。采用消息中间件的系统，不同的对象之间通过传递消息来激活对方的事件，以完成相应的操作，发送者将消息发送给消息
   服务器，消息服务器将消息存放在若干队列中，在合适的时候再将消息转发给接收者。消息中间件在不同平台之间通信，它常被用来屏蔽各种平台协议之间的特性，实现应用程序
   之间的协同。

   消息中间件负责处理网络通信，如果网络连接不可用，消息中间件会存储消息，直到连接变得可用，再将消息转发给应用程序B。灵活性的另一面体现在，当应用程序A发送其消息时，
   应用程序B甚至可以处于不运行状态，消息中间件将保留这份消息，直到应用程序B开始执行并消费消息，这样还防止了应用程序A因为等待应用程序B消费消息而出现阻塞

三.消息中间件的作用 
   解耦 ，冗余， 扩展性，削峰，可恢复性，顺序保证，缓冲，异步通信
   （注意：顺序性：只能保证一定程度上的顺序性，在特定情况下它是顺序性的）
   

四. rabbitmq相关概念 

   1. 生产者
      生产者创建消息，然后发布到Rabbitmq中，消息一般可以包含两个部分，消息体和标签，消息体可以称之为payload。消息的标签可以用来表述这条消息，比如一个交换机的名字
	  和一个路由键，生产者把消息交由rabbitmq,rabbitmq之后会根据标签把消息发送给感兴趣的消费者。
	  
	  
   2. 消费者
      消费者连接到rabbitmq服务器，并订阅到队列上，当消费者消费一条消息时，只是消费消息的消息体，在消息路由的过程中，消息的标签会丢弃，存入到队列的
      消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁。


     消息流转过程：
     product ---> 业务方数据（序列化）--->指定Exchange和RoutingKey等 --- > 消息 -----> broker ----> customer订阅并接收消息 ---> 消息 ---> 反序列化 ---> 接收业务方数据 --->业务处理


   3. 队列 
      是rabbitmq的内部对象，用于存储消息。rabbitmq中消息都只能存储在队列中，生产者生产消息，并最终投递到队列中，消费者可以从队列中获取消息并消费。   
	  多个消费者可以订阅同一个队列，这时队列中的消息会被平均分摊（轮询）给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。
	  
	  
   4. 交换机，路由键，绑定 
      Exchange： 交换机。生产者将消息发送给Exchange，由交换器将消息路由到一个或多个队列中。如果路由不到，或许会返给生产者，或许直接丢弃
	  RoutingKey: 路由键，生产者将消息发送给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键联合使用才能生效。
	  Binding: 绑定，Rabbitmq中通过绑定将交换器和队列关联起来，在绑定的时候一般会指定一个绑定键，这样rabbitmq就知道如何正确的将消息路由到队列了。
	  product ---> exchange ---> bindingkey1 -----> queue1
	                        ---> bindingkey2 -----> queue2
	  生产者将消息发送给交换机时，需要一个RoutingKey，当BingdingKey和RoutingKey相匹配时，消息会被路由到对应的队列中。在绑定多个队列到同一个交换器的时候，这些绑定允许使用
	  相同的BingdingKey,BindingKey并不是所有的情况下都会生效，它依赖于交换机的类型，fanout类型的交换器就会无视BindingKey,而是将消息路由到所有绑定到该交换器的队列中。
		

	  重要比喻： 交换器相当于投递包裹的邮箱，Routingkey相当于填写在包裹上的地址，BindingKey相当于包裹的目的地，当填写在包裹上的地址和实际想要投递的地址相匹配时，
	    那么这个包裹就会被正确的投递到目的地。某些情形下，RoutingKey与BingdingKey可以看作同一个东西。
	  
	 
   5.交换机类型 (一条消息可以被发送到多个队列)
     *** fanout: 它会把所有发送到该交换机的消息路由到所有与该交换器绑定的队列中
	 *** direct: 它会把消息路由到那些BindingKey和RoutingKey完全匹配的队列中
	 *** topic： direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的交换机
	             在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同。
     *** headers: 该类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。在绑定队列和交换机制定一组键值对，
	             当发送消息到交换机时，rabbitmq会获取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配队列和交换机绑定时指定的
				 键值对，如果完全匹配则消息会路由到该队列，否则不是路由到该队列。headers类型
	  
	  
	  
	  
	  
五. Rabbitmq运转流程
   
    生产者工作流程：
	  （1）：生产者连接到rabbitmq broker,建立一个连接(Connection),开启一个信道(Channel)
	  （2）：生产者声明一个交换器，并设置相关属性，比如交换机类型，是否持久化
	  （3）：生产者声明一个队列并设置相关属性，比如是否排他，是否持久化，是否自动删除等
	  （4）：生产者通过路由键将交换器和队列绑定起来
	  （5）：生产者发送消息至rabbitmq broker,其中包含路由键，交换器等消息
	  （6）：相应的交换器根据接收到的路由键查找相匹配的队列
	  （7）：如果找到，则将从生产者发送过来的消息存入相应的队列中
	  （8）：如果没有找到，则根据生产者配置的属性选择丢弃还是回退给生产者
	  （9）：关闭信道
	  （10）： 关闭连接
	  
	消费者接收消息的过程：
	   (1): 消费者连接到rabbitmq broker，建立一个连接（Connection），开启一个信道（Channel）
	   (2): 消费者向rabbitmq broker请求消费相应队列中的消息，可能会设置相应的回调函数，以及做一些准备工作。
	   (3): 等待rabbitmq broker回应并投递相应队列中的消息，消费者接收消息 
	   (4): 消费者确认（ack）接收到的消息
	   (5): rabbitmq 从队列中删除相应已经被确认的消息
	   (6): 关闭信道 
	   (7): 关闭连接 
	  
	  
	  
	  
	  
六：Connection，channel
   无论生产者还是消费者，都需要和Rabbitmq broker建立连接，这个连接就是一条TCP连接，也就是connection,
   一旦TCP连接建立起来，客户端紧接着可以创建一个AMQP信道（channel）,每个信道都会被指派一个唯一的ID，
   信道是建立在connection之上的虚拟连接，rabbitmq处理的每条AMQP指令都是通过信道完成的。
   
   我们完全可以直接使用Connection就能完成信道的工作，为什么还要引入信道呢？试想一种场景：一个应用程序中
   有很多个线程需要从rabbitmq中消费消息，或者生产消息，那必然会创建很多Connection,也就是多个TCP连接，
   然而对于操作系统而言，建立和销毁TCP连接是非常昂贵的开销，如果遇到使用高峰，性能瓶颈就随之显现。rabbitmq
   采用类似nio的做法，选择TCP连接复用，不仅可以减少性能开销，同时也便于管理。
   
   每个线程把持一个信道，所以信道复用了connection的TCP连接。同时rabbitmq可以确保每个线程的私密性，就像拥有
   独立的连接一样。当每个信道的流量不是很大时，复用单一的connnection可以在产生性能瓶颈的情况下有效的节省TCP
   连接资源。
   
   
   
   
	  
	  
七:  AMQP协议 
   AMQP的模型架构和Rabbitmq的模型架构一样的，生产者将消息发送给交换器，交换器和队列绑定，当生产者发送消息时所
   携带的routingkey与绑定时的Bindingkey相匹配时，消息即被存入相应的队列之中，消费者可以订阅相应的队列来获取消息
   
   
   
   
八. 连接rabbitmq 
    ConnectionFactory factory = new ConnectionFactory();
	factory.setUserNAme("username");
	factory.setPassword("password");
	factory.setVirtualHost("vh");
	factory.setHost("ip_address");
	factory.setPort("port");
	Connection conn = factory.newConnection();
	
	在创建之后，channel可以用来发送或接收消息了。
	Connection 可以用来创建多个channel实例，但是channel实例不能在线程间共享，应用程序应该为每个线程开辟一个channel。
	多线程间共享channel实例时非线程安全的。
	
	
	
	
	
	
九.交换器和队列 
   channel.exchangeDeclare(exchangeName,"direct",true);
   String queueName = channel.queueDeclare().getQueue();
   channel.queueBind(queueName,exchangeName,routingkey);
   上面创建了一个持久化的，非自动删除的，绑定类型为direct的交换器，同时创建了一个非持久化的，排他的，自动删除的队列（队列名自动生成）
   
   生产者和消费者都可以声明一个交换器或者队列，如果尝试声明一个已经存在的交换器或者队列，只要声明的参数完全匹配现存的交换器或者队列，
   rabbitmq就可以什么都不做，并成功返回，如果声明的参数不匹配则会抛出异常。
	
   **** 声明交换机 
     Exchange.DeclareOk exchangeDeclare(String exchange,String type,boolean durable,boolean autoDelete,boolean internal,Map<String,Object> args) throws IOException
     Exchange.DeclareOk 标识成功声明了一个交换器。
     （1）exchange：交换器的名称 
     （2）type: 交换器的类型，常见的类型有fanout,direct,topic
      (3) durable: 设置是否持久化，durable设置为true表示持久化，反之是非持久化。持久化可以将交换器存盘，在服务器重启的时候不会丢失相关信息
      (4) autoDelete： 设置是否自动删除，autoDelete设置为true则表示自动删除，自动删除的前提是至少有一个队列或者交换器与这个交换器绑定，之后所有与这个
           交换器绑定的队列或者交换器都与此解绑。注意不能错误的把这个参数理解为："当与此交换器连接的客户都断开时，rabbitmq会自动删除本交换器"
      (5) internal: 设置是否是内置的，如果设置为true,则表示是内置的交换器，客户端程序无法直接发送消息到这个交换器中，只能通过交换器路由到交换器这种方式。
	  (6) argment: 其他一些结构化参数
	
	
	  
   **** 声明队列 
      （a） Queue.DeclareOk queueDeclare() throws IOException; （默认） 
	        不带任何参数的queueDeclare方法默认创建一个由Rabbitmq命名名称，这种队列也称之为匿名队列，排他的，自动删除的，非持久化的队列。
	  （b）Queue.DeclareOk queueDeclare(String queue,boolean durable,boolean exclusive,boolean autoDelete,Map<String,Object> arguments) throws IOException
            (1): queue: 队列名称
            (2): durable: 设置是否持久化，为true则设置队列为持久化，持久化的队列会存盘，服务器重启的时候可以保证不丢失相关信息。
            (3): exclusive: 设置是否排他。为true则设置队列排他的。如果一个队列被声明为排他队列，该队列仅对首次声明它的连接可见，
                 并在连接断开时自动删除。这里需要注意三点，排他队列是基于连接可见的，同一个连接的不同信道是可以同时访问同一连接
				 创建的排他队列。“首次”是指如果一个连接已经声明了一个排他队列，其他连接是不允许建立同名的排他队列，这个与普通队列不同，
				 即使该队列是持久化的，一旦连接关闭或者客户端退出，该排他队列都会被自动删除，这种队列适用于一个客户端同时发送和读取消息的应用场景。
		    (4): autoDelete: 设置是否自动删除，为true则设置队列为自动删除，自动删除的前提是，至少有一个消费者连接到这个队列，之后所有与这个  
			      队列连接的客户端都断开时，这个队列自动删除，因为生产者客户端创建这个队列，或者没有消费者客户端与这个队列连接时，都不会自动删除这个队列。
		    (5): arguments: 设置队列的其他一些参数		  
		
  			
	  注意1： 生产者和消费者都能使用queueDeclare来声明一个队列，但是如果消费者在同一个信道上订阅了另一个队列，就无法再声明队列，必须先取消订阅
      注意2： rabbitmq的消息存储在队列中，交换器的使用并不真正消耗服务器的性能，而队列会。
	  
	  
	  
	  
	  
	  
	
十.消费消息
   rabbitmq的消费模式分为两种，推（push）模式和拉（pull） 模式，推模式采用Basic.Consume进行消费，而拉模式则调用Basic.Get进行消费
   （1） 推模式 
       接收消息一般通过实现Consumer接口或者继承DefultConsumer类来实现，当调用与Consumer相关的API方法时，不同的订阅采用不同的消费者标签来区分彼此，
	   在同一个Channel中的消费者也需要通过唯一的消费者标签以做区分。
	   String basicConsume(String queue,boolean autoAck,String consumerTag,boolean noLocal,boolean exclusive,Map<String,Object> args,Consumer callback);
	   *** queue: 队列的名称 
	   *** autoAck: 设置是否自动确认，建议设置false,即不自动确认
	   *** consumerTag: 消费者标签，用来区分多个消费者；
	   *** noLocal：设置为true则表示不能将同一个Connection中生产者发送的消息传送给这个Connection中的消费者。
	   *** exclusive: 设置消费者的其他参数
	   *** arguments: 设置消费者的其他参数 
	   *** callback: 设置消费者的回调函数，用来处理rabbitmq推送过来的消息，比如DefaultConsumer，使用时需要客户端重写其中的方法。
	  
	  
  （2）拉模式 
       通过channel.basicGet方法可以单条的获取消息，其返回值是getResponse,Channel类的basicGet方法没有其他重载方法，只有：
	   GetResponse basicGet(String queue,boolean autoAck) throws IOException;
	   其中queue代表队列的名称，如果设置autoAck为false,同样需要调用channel.basicAck来确认消息已被成功接收。
	   
	   
	注意: Basic.Consume将信道（Channel）置为接收模式，直到取消队列的订阅为止。在接收模式期间，rabbitmq会不断地推送消息给消费者，当然推送消息
	     的个数还是会受到Basic.Qos的限制，如果只想从队列获得单条消息而不是持续订阅，建议使用Basic.Get进行消费。但是不能将Basic.Get放在一个循环
		 里替代Basic.Consume，这样会严重影响Rabbitmq的性能。如果要实现高吞吐量，消费者理应使用Basic.Consume方法
	  
	  
     


十一. 消费端的确认与拒绝
       为了保证消息从队列可靠的达到消费者，rabbitmq提供消息确认机制。消费者在订阅队列时，可以指定autoAck参数，当autoAck等于false时，Rabbitmq会等待
	   消费者显式的回复确认信号后才从内存（或者磁盘）中移去消息（实质上是先打上删除标记，之后再删除）。当autoAck等于true时，rabbitmq会自动把发送
	   出去的消息置为确认，然后从内存或磁盘中删除，而不管消费者是否真正的消费到了这些消息。
	   
	   采用消息确认机制后，只要设置autoAck参数为false,消费者就有足够的时间处理消息（任务），不用担心处理消息过程中消费者进程挂掉后消息丢失问题，
	   因为rabbitmq会一直等待持有消息，直到消费者显示调用Basic.Ack命令为止。
     
       当autoAck参数设置为false，对于RabbitMQ服务端而言，队列中的消息分成了两个部分：一部分是等待投递给消费者的消息，一部分是已经投递给消费者，
	   但是还没有收到消费者确认的消息，如果rabbitmq一直没有收到消费者的确认信号，并且消费此消息消费者已经断开连接，则rabbitmq会安排该消息重新进入
	   队列，等待投递给下一个消费者，当然也可能还是原来的那个消费者。
	   
	   Rabbitmq不会为未确认的消息设置过期时间，它判断此消息是否需要重新投递给消费者的唯一依据是消费该消息的消费者连接是否已经断开，这么设计的
	   原因是rabbitmq允许消费者消费一条消息的时间可以很久很久
	   
	   ***** 消息拒绝:
	   void basicReject(long deliveryTag,boolean requeue) throws Exception;
	   如果requeue参数设置为true,则rabbitmq会重新将这条消息存入队列，以便可以发送给下一个订阅的消费者，如果requeue参数设置为false,rabbitmq立即会把消息从
	   队列中移除，而不会把它发送给新的消费者。
	   
	   Basic.Reject命令一次只能拒绝一条消息，如果想要批量拒绝消息，则可以使用Basic.nack这个命令。消费者客户端可以调用channel.basicNack方法来实现，
	   void basicNack(long deliveryTag,boolean multiple,boolean requeue) throws Exception;
       将channel.basicRejec或者channel.basicNack中的requeue设置为false,可以启用“死信队列”的功能。死信队列可以通过检测被拒绝或者未送达的消息追踪问题。
       
	  
	  
	  
	  
	  

十二. 消息何去何从 
    mandatory（强制的）和immediate（立即的）是channel.basicPublish方法中的两个参数，他们都有当消息传递过程中不可达目的地时将消息返回给生产者的功能。
	
	（1） mandatory参数 
          当mandatory参数设置未true时，交换器无法根据自身的类型和路由键找到一个符合条件的队列，那么Rabbitmq会调用Basic.Return方法将消息返回给生产者。
          当mandatory参数设置为false时，出现上述情形，则消息直接被丢弃。		  
	  
	      那么生产者如何获取到没有被正确路由到合适队列的消息呢？ 这时候可以通过调用channel.addReturnListner来添加ReturnListener监听器实现。
		  channel.basicPublish(EXCHAGE_NAME,"",true,MessageProperties.PERSOSTENT_TEXT_PLAIN,"test".getBytes());
		  channel.addRetrunListener(new ReturnListener(){
		     public void handleReturn(int replyCode,String replyText,String exchange,String routingKey,AMQP.BasicProperties basicProperties,byte[] body) throws IOException{
			     String message = new String(body);
				 System.out.println("Basic.Return返回的结果是："+message);
			 }
		  });
	      上述代码中生产者没有成功地将消息路由到队列，此时Rabbitmq会通过Basic.Return返回"test"这条消息，之后生产者客户端通过ReturnListener监听到这个事件，
          然后做自己业务逻辑处理。		  
	      mandatory参数告诉服务器至少将该消息路由到一个队列中，否则将消息返回给生产者。
	  
	  （2）immediate
	       Rabbitmq去掉了对immediate的支持，官方解释是immediate参数会影响镜像队列的性能，增加了代码的复杂性，建议采用TTL和DLX的方法替代
	  
	  
	  
	  
	  
	  
	  
十三. 备份交换机
     生产者在发送消息的时候如果不设置mandatory参数，那么消息在未被路由的情况下将会丢失，如果设置了mandatory参数，那么需要添加ReturnListener的编辑逻辑。
 生产者的代码将变的复杂，如果既不想复杂化生产者的编程逻辑，又不想消息丢失，那么可以使用备份交换机，这样可以将未被路由的消息存储在rabbitmq中，再在需要的
 时候处理这些消息。	 

    Map<String,Object> args = new HashMap<String,Object>();
	args.put("alternate-exchange","myAe");
	channel.exchangeDeclare("normalExchange","direct",true,false,args);  //这里设置了myAe是alternate-exchange的备份交换机
	channel.exchangeDeclare("myAe","fanout",true,false,null);
	channel.queueDeclare("normalQueue",true,false,false,null);
	channel.queueBind("normalQueue","normalExchange","normalKey");
	channel.queueDeclare("unroutedQueue",true,false,false,null);
	channel.queueBind("unroutedQueue","myAe","");
	
    生产者发送消息，如果Exchange找到匹配的队列则将消息入队，如果消息无法路由则发送给备份交换器。
	备份交换器其实和普通的交换器没有太大的区别，为了方便使用，建议设置为fanout类型，需要注意的是，消息被重新发送到备份交换器时的路由键和从生产者发出的
	路由键是一样的。
	
	  
	对于备份交换器，有以下几种特殊情况：
	*** 如果设置的备份交换器不存在，客户端和rabbitmq服务端都不会有异常出现，此时消息会丢失。
	*** 如果备份交换器没有绑定任何队列，客户端和rabbitmq服务端都不会有异常出现，此时消息会丢失。 
	*** 如果备份交换器没有任何匹配的队列，客户端和rabbitmq服务端都不会有异常，此时消息会丢失。 
	*** 如果备份交换器和mandatory参数一起使用，那么mandatory参数无效
	  
	  
	  
	  
	  
	  
十四： 过期时间

      目前有两种方法可以设置消息的TTL。第一种方法是通过队列属性设置，队列中所有消息都有相同的过期时间。第二种方法就是对消息本身进行单独设置，
  每条消息的TTL可以不同。如果两种方法一起使用，则消息的TTL以两者之间较小的那个数值为准。消息在队列中的生存时间一旦超过设置的TTL值时，就会
  变成"死信"。
     通过队列属性设置消息TTL的方法在channel.queueDeclare方法中加入x-message-ttl参数实现的。这个参数的单位是毫秒。
	 Map<String,Object> args = new HashMap<String,Object>();
	 args.put("x-message-ttl",6000);   //------这里设置过期时间
	 channel.queueDeclare(queueName,durable,exclusive,autoDelete,args);

     如果不设置TTL，则表示此消息不会过期，如果将TTL设置为0，则表示除非此时可以直接将消息投递到消费者，否则该消息会被立即丢弃


    设置队列TTL，通过channel.queueDeclare方法中的x-expires参数可以控制被自动删除前处于未使用状态的时间。未使用的意思是队列上没有
	任何的消费者，队列也没有被重新声明，并且在过期时间段内也未调用过Basic.Get命令
	
	
	  
	  
	  
	  
	  
十五. 死信队列 
    DLX称之为死信交换器，也有人称之为死信邮箱，当消息在一个队列中变成死信之后，它能被重新发送到一个交换器中，这个交换器就是DLX,绑定DLX的队列就是死信队列
    消息变成死信一般是有以下几种情况：
    *** 消息被拒绝（Basic.Reject/Basic.Nack）,并且设置requeue参数为false
    *** 消息过期 
    *** 队列达到最大长度	
	
	DLX也是一个正常的交换器，和一般的交换器没有区别，它能在任何的队列上被指定，实际上就是设置某个队列的属性。当这个队列中存在死信时，rabbitmq就会自动的将
	这个消息重新发布到设置DLX上去，进而被路由到另一个队列，即死信队列。可以监听这个队列中的消息以进行相应的处理。
	通过在channel.queueDeclare方法中设置x-dead-letter-exchange参数来为这个队列添加DLX。
	
	示例1：
	channel.exchangeDeclare("dlx_exchange","direct"); //创建死信队列
	Map<String,Object> args = new HashMap<String,Object>();
	args.put("x-dead-letter-exchange","dlx_exchange");
	channel.queueDeclare("myqueue",false,false,false,args);
	也可以为这个DLX指定路由键，如果没有特殊指定，则使用原队列的路由键
	args.put("x-dead-letter-routing-key","dlx-routing-key");

	示例2：
    channel.exchangeDeclare("exchange.dlx","direct",true);  //声明队列 
	channel.exchangeDeclare("exchange.normal","fanout",true);//声明队列 
	Map<String,Object> args = new HashMap<String,Object>();
	args.put("x-message-ttl",10000); //过期时间 
	args.put("x-dead-letter-exchange","exchange.dlx");  //设置死信队列 
	args.put("x-dead-letter-routing-key","routing-key"); //死信队列的routing-key 
	channel.queueDeclare("queue.normal",true,false,false,args); //声明队列，同时设置死信队列
	channel.queueBind("queue.normal","exchange.normal","");  //队列绑定到交换机
	channel.queueDeclare("queue.dlx",true,false,false,null);  //声明队列 
	channel.queueBind("queue.dlx","exchange.dlx","routing-key");  //队列绑定到交换机 
	channel.basicPublish("exchange.normal","rk",MessageProperties.PERSOSTENT_TEXT_PLAIN,"dlx".getBytes());  //生产一条消息
	过程：生产者首先发送一条携带路由键为“rk”的消息，然后经过交换器exchange.normal顺利地存储到队列queue.normal中。由于队列queue.normal
	设置了过期时间为10s，在这10s内没有消费者消费这条消息，那么判定这条消息为过期。由于设置了DLX，过期之时，消息被丢给交换器exchange.dlx中，
	这时找到与exchange.dlx匹配的队列queue.dlx,最后消息被存储在queue.dlx这个死信队列中。
	
    	
	
	  
	  
	  
	  
	  
	  
十六： 延迟队列
  在AMQP协议中，或者Rabbitmq本身没有直接支持延迟队列的功能，但是可以通过DLX和TTL模拟出延迟队列的功能	  

	  
	  
	  
	  
	  
	  
	  

十七： 持久化 
   
   持久化可以提高RabbitMQ的可靠性，以防止在异常情况（重启，关闭，宕机等）下的数据丢失，rabbitmq的持久化分为三部分：交换器的持久化，
   队列的持久化，消息的持久化。
	  
   *** 1. 交换机持久化
       交换机的持久化是通过是通过在声明交换机时将durable参数设置为true实现的。如果交换机不设置持久化，那么在Rabbitmq服务重启之后，相关的元数据会丢失，
	   不过消息不会丢失，只是不能将消息发送到这个交换机了。对于一个长期使用的交换机来说，建议将其设置为持久化的
	  
	  
   *** 2.队列持久化
        队列持久化通过在声明队列时durable参数置为true实现的，如果队列不设置持久化，那么在rabbitmq服务重启之后，相关队列的元数据会丢失，此时数据
        也会丢失.队列都没有了，消息又能存在哪里呢。
		队列的持久化能保证其本身的元数据不会因异常情况而丢失，但是并不能保证内部所存储的消息不会丢失。要确保消息不会丢失，需要将其设置为持久化。
		
   *** 3. 消息持久化
        要确保消息不会丢失，需要将其设置为持久化，通过将消息的投递模式（BasicProperties中的deliveryMode属性）设置为2即可实现消息的持久化。
		MessageProperties.PERSOSTENT_TEXT_PLAIN实际上是封装了这个属性 
		public static final BasicProperties PERSOSTENT_TEXT_PLAIN = new BasicProperties("text/plain",null,null,2,0,null,null,null,null,null,null,null,null,null);
       
      设置了队列和消息的持久化，当Rabbitmq服务重启之后，消息依旧存在。单单只设置队列持久化，重启之后消息会丢失；单单设置消息的持久化，重启之后队列消失，继而消息
	  也会丢失。单单设置消息的持久化而不设置队列的持久化显得毫无意义
   
  注意点：
   （1） 可以将所有的消息都设置为持久化，但是这样会严重影响Rabbitmq的性能。写入磁盘的速度比写入的内存的速度慢的不止一点点，对于可靠性不是那么高的消息
         可以不采用持久化处理以提高整体的吞吐量。在选择是否将消息持久化时，需要在可靠性和吞吐量之间做一个权衡。
	  
   （2） 将交换器，队列，消息都设置了持久化之后不能百分之百保证数据不丢失。在持久化的消息正确存入Rabbitmq之后，还需要有一段时间（虽然很短，但是不能忽略）才能
         存入磁盘之中，Rabbitmq不会为每条消息都进行同步存盘（调用内核的fsync方法）的处理，可能仅仅保存到操作系统缓存之中为不是保存在物理磁盘中，如果在这段时间内
         Rabbitmq服务节点发生了宕机，重启等异常情况，消息还没来得及保存磁盘中，那么这些消息将会丢失。
         这个问题如何解决，可以使用Rabbitmq的镜像队列机制，相当于配置了副本，如果主节点（master）在此特殊时间内挂掉，可以自动切换到从节点（slave），这样有效的保证
		 了高可用，除非整个集群都挂掉。虽然这样也不能完全保证rabbitmq消息不丢失，但是配置了镜像队列要比没有配置镜像队列的可靠性要高很多，在实际生产环境中的关键业务队列
		 一般都会设置镜像队列。
		 
	  
	  
	  
	  
	  
	  
	  
十八： 生产者确认 
     问题：当消息的生产者将消息发送出去之后，消息到底有没有正确的到达服务器？如果不进行特殊配置，默认情况下发送消息的操作是不会返回任何信息给生产者的，也就是 
	       默认情况下生产者是不知道消息有没有正确的达到服务器。如果在消息到达服务器之前已经丢失，持久化操作也解决不了这个问题，因为消息根本没有到达服务器，何谈持久化？
      rabbitmq针对这个问题，提供了两种解决方法：
	  （1） 通过事务机制实现   ---- 比较繁琐
	  （2） 通过发送方确认（publisher confirm）机制实现
	  
	  
	  *** 发送方确认机制
	     消息的发送方并不知道消息是否真正的到达了rabbitmq，使用事务机制来解决问题，但是采用事务机制实现会严重降低rabbitmq的消息吞吐量，可以使用一种轻量级的方式----发送方确认机制。
		 
		 生产者将信道设置成confirm（确认）模式，一旦信道进入confirm模式，所有在该信道上面发布的消息都会被指派一个唯一的ID（从1开始），一旦消息被投递到所有匹配的队列之后，Rabbitmq
		 就会发送一个确认（Basic.Ack）给生产者（包含消息的唯一ID），这就使得生产者知晓消息已经正确到达了目的地了。如果消息和队列是可持久化的，那么确认消息会在消息写入磁盘之后发出。
		 Rabbitmq回传给生产者的确认消息中的deliverTag包含了确认消息的序号，此外rabbitmq也可以设置channel.basicAck方法中的multiple参数，表示到这个序号之前的所有消息都已经得到了处理。
		 
		 事务机制在一条消息发送之后就会使发送端阻塞，以等待rabbitmq的回应，之后才能继续发送下一条消息。相比之下，发送方确认机制最大的好处就在于它是异步的，一旦发布一条消息，生产者 
		 应用程序就可以在等信道返回的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用程序便可以通过回调方法来处理该确认消息，如果Rabbitmq因为自身内部错误导致消息丢失，
		 就会发送一条nack(Basic.Nack)命令，生产者应用程序同样可以在回调方法中处理该nack命令。
		 
		 生产者通过调用channel.confirmSelect方法（Confirm.Select命名）将信道设置为confirm模式，之后RabbitMq会返回Confirm.Select-OK命令表示同意生产者将当前信道设置为confirm模式，
		 所有被发送的后续消息都被ack或者nack一次，不会出现一条消息既被ack又被nack的情况。并且RabbitMq也并没有对消息被confirm的快慢做任何保证。
		 
		 
	     注意： 
		 a>>  事务机制和publisher confirm机制两者是互斥的，不能共存。
		 b>>  事务机制和publisher confirm机制确保的是消息能够正确的发送至Rabbitmq，这里的“发送至Rabbitmq”的含义是指消息被正确的发送到Rabbitmq的交换器，如果此交换器没有匹配的队列，
		      那么消息也会丢失，所以在使用这两种机制的时候要确保所涉及的交换器能够有匹配的队列。更一步讲，发送方要配合mandatory参数或者备份交换器一起使用来提高消息的传输的可靠性。
	     
		 publisher confirm的优势：
		 a>> 批量confirm方法: 每发送一批消息之后，调用channel.waitForConfirms方法，等待服务器的确认返回。
		 b>> 异步confirm方法：提供一个回调方法，服务端确认了一条或者多条消息后，客户端回调这个方法进行处理
	  
	  
	     
		 发送方确认 ---- 同步确认
		 public class SyncConfirmSender{
		      public static void main(String[] args) throws Exception{
			     ConnectionFactory factory = new ConnectionFactory();
				 factory.setHost("localhost");
				 Conecttion connection = factory.newConnection();
				 Channel channel = connection.createChannel();
			     
				 channel.exchangeDeclare("ex_name",BuiltinExchangeType.DIRECT); //声明交换机 
				 channel.queueDeclare("q_name",false,false,false,null);   //声明队列 
				 channel.queueBind("ex_name","q_name","routing-key");     //绑定交换机和队列
				 
				 channel.confirmSelect(); //将信道设置成确认模式
				 channel.basicPublish("ex_name","routing-key",null,"hello".getBytes());
				 if(!channel.waitForConfirms()){
				     System.out.println("发送失败------");
				 }else{
				     System.out.println("发送成功-----")
				 }
			  }
		 }
		 
	  
	    发送方确认 ---- 异步确认
		public class SyncConfirmSender(){
		     public static void main(String[] args) throws Exception{
			     ConecttionFactory factory = new ConecttionFactory();
				 factory.setHost("localhost");
				 Connection connection = factory.newConnection();
				 Channel channel = connection.createChannel();
				 
				 channel.exchangeDeclare("ex_name",BuiltinExchangeType.DIRECT); //声明交换机
				 channel.queueDeclare("q_name",false,false,false,null);   //声明队列 
				 channel.queueBind("q_name","ex_name","routing-key");  //绑定交换机和队列 
				 
				 channel.confirmSelect(); //将信道设置成确认模式 
				 //添加确认监听器
				 channel.addConfirmListener(new ConfirmListener(){
				     @Override
					 public void handleAck(long deliveryTag,boolean multiple) throws IOException{
					     System.out.println("Ack:成功了");
					 }
					 @Override
					 public void handleNack(long deliveryTag,boolean multiple) throws IOException{
					     System.out.println("Nack: 失败了")；
					 }
				 });
				 channel.basicPublish("ex_name","routing-key",null,"hello".getBytes());
			 
			 }
		}
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
十九：消费端要点
     消费者客户端可以通过推模式或者拉模式的方式来获取并消费消息，当消费者处理完业务逻辑需要手动确认消息已被接收，这样RabbitMq才能把当前消息从队列
  中标记清除。如果消费者由于某些原因无法处理当前收到的消息，可以通过channel.basicNack或者channel.basicReject来拒绝。
	 对于Rabbitmq消费端来说 ，有几个注意点：
     *** 消息分发
     *** 消息顺序性
	 *** 弃用QueueingConsumer
  
	  
	 (1) 消息分发  （Basic.Qos对于拉模式的消费方式无效）
	         当rabbitmq队列拥有多个消费者时，队列收到的消息将以轮询的分发方式发送给消费者。每条消息只会发送给订阅列表的一个消费者。这种方式非常适合
		 扩展,如果现在的负载加重，那么只需要创建更多的消费者来处理消息即可。
             很多时候轮询的分发机制不是那么优雅。默认情况下，如果有n个消费者，那么Rabbitmq会将第m条消息分发给第m%n个消费者，rabbitmq不管消费者是否
         消费并确认了消息，而某些其他消费者由于某些原因（比如业务简单，机器性能好）很快的处理完了所分配的消息，进而进程空闲，这样就会造成整体应用
         吞吐量的下降。
             为了解决这个问题，这里就要用到channel.basicQos(int prefetchCount)这个方法，此方法允许限制信道上的消费者所能保持的最大未确认消息的数量。
         在订阅消费队列之前，消费端程序调用了channel.basicQos(5)，之后订阅了某个队列进行消费。RabbitMQ会保存一个消费者的列表，每发送一条消息都会为
         对应的消费者计数，如果达到了所设定的上限，那么Rabbitmq就不会向这个消费者再发送任何消息。直到消费者确认了某条消息之后，Rabbitmq将相应的计数
         减1，之后消费者可以继续接收消息，直到再次到达计数上限。		 
	  
	     void basicQos(int prefetchCount) throws IOException;
		 void basicQos(int prefetchCount,boolean global) throws IOException;
		 void basicQos(int prefetchSize,int prefetchCount,boolean global) throws IOException;
	     参数说明：
		 prefetchCount: 告诉rabbitmq不要一次性给消费者推送大于N个消息，如果设置为0,则没有上限
		 prefetchSize: 这个参数表示消费者所能接收未确认的消息的总体大小的限制,设置为0表示没有上限
		 global： 是否将上面的设置应用于这个通道， false:表示只应用于当前消费者  true：表示当前通道的所有消费者都应用这个限流策略
	     
	     Channel channel = ...;
		 Consumer consumer1 = ....;
		 Consumer consumer2 = ....;
		 channel.bassicQos(10);
		 channel.basicConsume("my-queue1",false,consumer1);
		 channel.basicConsume("my-queue2",false,consumer2);
		 
	 (2) 消息顺序性 
	     rabbitmq不能保证消息的顺序性。 只有在不适用任何Rabbitmq的高级特性，也没有消息丢失，网络故障等异常的发生，并且只有一个消费者的情况下，
		 最好也只有一个生产者的情况下可以保证消息的顺序性
	  
	  
	  
	  总结：提升数据可靠性有以下几个途径： 设置mandatory参数或者备份交换器；设置publisher confirm机制或者事务机制；设置交换器，队列和消息都为持久化；
	        设置消费者对应的autoAck参数为false,并在消费完消息之后再进行消息确认。
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  





